#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define DEFAULT_CAPACITY 100

struct Pxl {
    int x;
    int y;
    unsigned char color[3];
};

typedef struct Pxl Pixel;



int main(int argc, char *argv[])
{
    clock_t startClock = clock();
    int i = 0, j = 0;
    int cap = DEFAULT_CAPACITY;
    int readed = 0;

    Pixel ** screen = (Pixel**)malloc(cap*sizeof(Pixel*));

    FILE *filePointer = fopen("screen.pixels", "rb");
    if (filePointer != NULL)
    {
        while (!feof(filePointer))
        {
            Pixel *p = (Pixel*)malloc(sizeof(Pixel));
            readed = fread(&p->x, sizeof(p->x), 1, filePointer);
            if (readed == 0)
            {
                free(p);
                continue;
            }
            fread(&p->y, sizeof(p->y), 1, filePointer);
            fread(&p->x, sizeof(p->x), 1, filePointer);
            fread(p->color, sizeof(*p->color), sizeof(p->color), filePointer);

            if (i == cap)
            {
                cap += DEFAULT_CAPACITY;
                Pixel **temp = (Pixel**)malloc(cap*sizeof(Pixel*));
                if (screen != NULL)
                {
                    for (j=0; j<i; j++)
                    {
                        temp[j] = screen[j];
                    }
                    free(screen);
                }
                screen = temp;
            }

            screen[i] = p;
            i++;

        }
        fclose(filePointer);
    }

    clock_t endClock = clock();
    double seconds = ((double)endClock - (double)startClock) / CLOCKS_PER_SEC;
    printf("loading: %Lf\n", seconds);


    return 0;
}
